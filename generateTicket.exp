#!/usr/bin/expect -f
set ticketName [lindex $argv 0]
set thisScriptDir  [file dirname $argv0]
set shDir "$thisScriptDir/sh"
set branch "dev"


proc getPassword {} {
	stty -echo
	send_user -- "Git password: "
	expect_user -re "(.*)\n"
	send_user "\n"
	stty echo
	set password $expect_out(1,string)
	return $password
}

proc strlen s {
	set n 0
	foreach char [split $s ""] {incr n}
	return $n
} 

proc debugLog { debugMessage } {
	set message "EXPECT: $debugMessage"
	puts $message
}

proc cleanUpOnFail { shDir branch } {
	debugLog "There was an error. Attempting automatic cleanup";
	spawn bash $shDir/cleanUpOnFailAndInform.sh $branch
		expect {
			"cleaned up. back to $branch." {
				debugLog "Clean up successful. Please try generating a ticket again"		
			}
			default {
    			debugLog "Could not clean automatically. CLEAN UP MANUALLY."
			}
		}
        exit
}

proc checkoutDevAndPull { shDir password branch } {
    spawn bash $shDir/gitPullAndInform.sh $branch
        expect {
            "Password" {
                send "$password\r"; exp_continue
            }
			"fatal" {
				wait
				exp_close -i $spawn_id
				debugLog "Wrong password. Try again."
				exit
			}
            "gitPullDone" {
                wait
                exp_close -i $spawn_id
            }
			"error: pathspec" {
				debugLog "Invalid branch selected: $branch"
				exit
			}
        }
}

proc cleanLocalProxyBranch { shDir thisScriptDir } {
    spawn bash $shDir/cleanProxyBranchAndInform.sh
        expect {
            "proxyBranchExp deleted" {
				debugLog "Ready for use"	
				 }
            default { debugLog "could not delete proxy branch" }
        }
}

proc start { ticketName shDir thisScriptDir password branch } {

    checkoutDevAndPull $shDir $password $branch

    spawn bash $shDir/checkoutLocalBranchAndInform.sh
        expect {
            "proxyBranchExp created" {
                wait
                exp_close -i $spawn_id
            }
        }

    spawn bash $shDir/generateCommit.sh $ticketName
        expect {
            "ticketGeneratingCommitDone" {
                wait
                exp_close -i $spawn_id
            }
        }

    spawn bash $shDir/pushAndCreateUpstreamTicket.sh $branch
        expect {
            "fatal" {cleanUpOnFail $shDir $branch}
            "Password" {send "$password\r"; exp_continue}
            "EXPECT TRIGGER: Expect upstream ticket created" {
                    set expBuffer $expect_out(buffer)
                    wait
                    exp_close -i $spawn_id 
                }
        }

	set ticketNumber null;
	
	 if {[regexp {\-\-\>\s#([\d]*)\:} $expBuffer -> key value]} {
		   set ticketNumber $key
	 } else {
			debugLog "could not parse ticketNumber"
			cleanUpOnFail $shDir $branch
	 }

     checkoutDevAndPull $shDir $password $branch

     spawn bash $shDir/checkoutLocalTicketAndInform.sh $ticketNumber
        expect {
            "expTicketCheckedOut" {
            }
            default {
                debugLog "could not checkout local ticket. Do it manually"
            }
        }

    cleanLocalProxyBranch $shDir $thisScriptDir
}

proc areAllChangesCommited {} {
	spawn git status
		expect {
			"nothing to commit, working tree clean" {
				return 1
			}
			default  {
				return 0
			}
		}
} 

set argsLen [llength $argv]
if {$argsLen > 2 || $argsLen < 1} {
    debugLog "Usage { ticket-generator <message> <branch(optional)> }"
	debugLog "Enter the ticket name between quotation marks. Ex. \"This is a valid message\""
} else {
	if {$argsLen == 2} {
		set branch [lindex $argv 1]
	}

	if {[file exists $thisScriptDir/config/CheckStatus.flag]} {
		set isEverythingCommited [areAllChangesCommited] 
		if {$isEverythingCommited < 1} {
			debugLog "There are uncommited changes. Please commit them before generating a ticket."
			exit;
		}
	}


	set commitMessageLen [strlen $ticketName]
	if {$commitMessageLen < 10 || $commitMessageLen > 100} {
		debugLog "The ticket generation message must be between 10 and 100 symbols long"
		exit;
	} 

	set password [getPassword]
   	start $ticketName $shDir $thisScriptDir $password $branch
	
}
